#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-activationkey-import

A script to import activation keys from a JSON format textfile into your RHN Satellite or Spacewalk server.
The json file should have been created by the companion spw-activationkey-export script

Tested on satellite 5.4.1, but still considered beta. Backup your satellite DB before using it.

This provides a subset of the functionality of the kickstart import/export scripts, as follows:

What it attempts to import:
* activation keys
- keys will be imported using the logged-in user's RHN organisation (the prefix may change)

* system groups (by ID and name)
- missing system groups will be created

* config channels
- skipped if not present on importing satellite

* software channels
- must exist locally, or import will fail

These items should exist on the destination satellite before you attempt to import a key that uses them.

This script uses the python 'rhnapi' module, which should be on your PYTHONPAT
"""

__author__ = "Stuart Sears <sjs@redhat.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
import time
import re
from optparse import OptionParser, OptionGroup
from pprint import pprint

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
# software channel management
from rhnapi import channel
# config channel management
from rhnapi import configchannel
# activation key management
from rhnapi import activationkey
# this needs editing to add the ID->name functionality:
from rhnapi import systemgroup
# utility functions, including JSON management
from rhnapi import utils

# --------------------------- Script Configuration --------------------------- #
# server hostname and config file location
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# authentication info
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# script-specific configuration
# if we want to exclude reactivation keys (we probably do), this is a simple
# regex pattern that matches their descriptions.
react_pattern = re.compile(r'^(Kickstart )?(Reactivation|re-activation) Key.*$', re.I)
org_pattern = re.compile(r'(^[\d]+)-(.*)$')

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "import all (or a list of) activation keys from a JSON-format text file"
    usagestr = "%prog [RHNOPTS] [OTHEROPTS] JSONFILE"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
            help = "enable debug output for RHN session (XMLRPC errors etc")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
            help = "increase verbosity")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    keygrp = OptionGroup(parser, "Activation Key options", "Options for processing Activation Keys")
    keygrp.add_option("--list", action = "store_true", default = False, help = "List activation keys in file and exit [%default]")
    keygrp.add_option("-k", "--key", help = "Activation Key (the hyphenated 'hex string'). Can also take a comma-separated list. No spaces. If not specified, an attempt will be made to import all keys from your JSON file that do not currently exist on the satellite.")
    keygrp.add_option("-r", "--reactivation-keys", action = "store_true", default = False, help = "Import reactivation keys as well [%default]")
    keygrp.add_option("--test", action = "store_true", default = False, help = "DRY RUN. Simply report what would happen.")
    keygrp.add_option("-i", "--interactive", action = "store_true", default = False, help = "Operate in interactive mode. Can be very tedious.")
    parser.add_option_group(keygrp)

    opts, args = parser.parse_args()
    if len(args) != 1:
        print "you need to provide me a JSON file with activation key data in it"
        parser.print_help()
        sys.exit(1)
    elif not os.path.isfile(args[0]):
        print "%s does not appear to be a file."
        parser.print_help()
        sys.exit(1)
    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def create_activation_key(rhn, keyinfo, interactive = False, verbose = False):
    """
    creates an activation key from a dict structure.
    This is complex... we have to
    1. create the key
    2. add base and child software channels
       - if they don't already exist with teh correct labels,
         this will fail :)
    4. set config management options and channels
       - missing config channels are skipped
    5. set group memberships
       - missing groups are created by name
    """
    rhn.logInfo("creating activation key '%(description)s' (%(key)s)" % keyinfo)

# remove the org prefix from the key (the satellite will add this for us)
# if our key starts with NUMBER(S)-, this represents the org. Strip them off.
# this is fairly simplistic, but should do the trick most of the time, as we are only really
# expecting to import keys from a file whose format we control.
    rematch = org_pattern.match(keyinfo['key'])
    if rematch:
        rhn.logDebug("* Removing org prefix from key for import.")
# the groups will look like this in a matching key:
# key: 1-7880d5086175346802f137fed1dafe2f, groups = ('1', '7880d5086175346802f137fed1dafe2f')
# regex is used to allow for
# 1. non-org keys (just in case)
# 2. orgs >= 10
        mykey = rematch.groups()[1]

    # now try to create it. There is more than one way to do this, depending on
    # whether you specify a usage limit or not.
    keyid = activationkey.create(rhn,
                                 keyinfo['description'],
                                 mykey,
                                 basechannel=keyinfo['base_channel_label'])
    
    if keyid:
        rhn.logDebug("key %(key)s created" % keyinfo)

        if len(keyinfo['entitlements']) > 0:
            rhn.logInfo("Adding entitlements '%s' to key" % ','.join(keyinfo['entitlements']) )
            if activationkey.addEntitlements(rhn,keyid, keyinfo['entitlements']):
                rhn.logDebug("Entitlements set appropriately")

        # add the key to our global activation key list to avoid having to do this again
        existing_keys.append( (keyinfo['description'], keyid) )

        if len(keyinfo['child_channel_labels']) > 0:
            rhn.logInfo("Adding child software channels")
            if activationkey.addChildChannels(rhn, keyid, keyinfo['child_channel_labels']):
                rhn.logDebug("child channels successfully added")
            
        if len (keyinfo['packages']) > 0:
            rhn.logInfo("Adding packages")
            # add packages one at a time to aid logging
            for pkg in keyinfo['packages']:
                if activationkey.addPackages(rhn, keyid, [ pkg ]):
                    try:
                        rhn.logDebug("* %(name)s [%(arch)s] added" % pkg )
                    except KeyError:
                        rhn.logDebug("* %(name)s added" % pkg)
                else:
                    rhn.logError("ERROR: Failed to add package %(name)s - does it exist?" % pkg)

        # add configuration channels to the key (if they exist)

        rhn.logInfo("adding (existing) configuration channels to activation key")
        configlabels = []

        # check that the config channels exist
        for chan in keyinfo['config_channels']:
            if configchannel.channelExists(rhn,chan['label']):
                rhn.logDebug("Configuration channel %(label)s exists, appending to our 'add' list" % chan)
                configlabels.append(chan['label'])
            else:
                rhn.logError("ERROR: config channel label %(label)s does not exist locally, skipping it." % chan)
                continue

# did we find any of the specified configuration channels?
        if len(configlabels) != 0:        
            if activationkey.addConfigChannels(rhn, [ keyid ], configlabels):
                for c in configlabels:
                    rhn.logDebug("added configuration channel %s to key" % c)

# process the config deployment checkbox (value = 1/0)
        if keyinfo['config_deploy'] == 1:
            if activationkey.enableConfigDeployment(rhn, keyid):
                rhn.logInfo("* Enabled config deployment")
        else:
            if activationkey.disableConfigDeployment(rhn, keyid):
                rhn.logInfo("* Disabled config deployment")
# process system groups - create them by name if missing on the local satellite
# prompt for confirmation of this if in --interactive mode
        rhn.logInfo("Processing system group memberships")
        if keyinfo.has_key('server_groups'):
            add_groups = []
            for grp in keyinfo['server_groups']:
                if grp['name'] in existing_groups:
                    rhn.logInfo("- Server Group %(name)s exists locally, adding it" % grp )
                    add_groups.append(grp)
                else:
                    rhn.logError("ERROR: server group %(name)s does not exist locally")
                    # are we in interactive mode? This is passed all the way own from our commandline options
                    if interactive:
                        res = utils.promptConfirm('create missing system group %s (%s)' % (grp['name'], grp['description']))
                    else:
                        res = True
                   
                    if res:
                        newgrp = create_group(rhn, grp)
                        if newgrp is not None:
                            rhn.logDebug("group '%(name)s' created" % newgrp)
                            existing_groups.append(newgrp['name'])
                            add_groups.append(newgrp)
                        else:
                            print "could not create group %s, skipping" % grp
                            continue
            for grp in add_groups:
                rhn.logDebug("Adding existing system groups to key")
                if activationkey.addGroupsByName(rhn, keyid, grp['name']):
                    print "added group %s" % grp['name']
        else:
            rhn.logInfo("No system group memberships specified.")
        return True
    else:
        return False

# ---------------------------------------------------------------------------- #

def create_group(rhn, groupinfo):
    """
    creates a system group (by name & description) if it doesn't already exist
    """
    groupdata =  systemgroup.create(rhn, groupinfo['name'], groupinfo['description']) 
    if groupdata is not None and groupdata is not False:
        return groupdata

    else:
        return None

# ---------------------------------------------------------------------------- #

def keytable(keylist):
    """
    Print a table of the description/key pairs in keytable
    """
    if len(keylist) == 0:
        print "(No Activation Keys found)"
        return False
    # maximum field lengths for all keys in each activationkey object        
    maxlen = utils.getMaxLen(keylist)
    #  
    fmtstr = "%%(key)-%(key)ds %%(description)s" % maxlen
    print fmtstr % { 'key' : "Activation Key", 'description' : "Description" }
    print fmtstr % { 'key' : "--------------", 'description' : "-----------"}
    for keyobj in keylist:
        print fmtstr % keyobj
    
# ---------------------------------------------------------------------------- #

def main():
    """
    This script is intended to do the following:
    1. load a list of activation key structures from a JSON file
    2. check each key for missinig items on the satellite server.
    """
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    jsonfile = args[0]

    try:
        # first let's attempt to load from the provided filename
        # no point in trying RHN connections if this fails
        
        keyobjects = utils.loadJSON(jsonfile)

        if not opts.reactivation_keys:
            keyobjects = [ x for x in keyobjects if not react_pattern.match(x['description']) ]

        # extract keynames - we'll use this to check if the key already exists.
        keynames = [ x['key'] for x in keyobjects ]

        if opts.key:
            selected_keys = [ x for x in keyobjects if x['key'] in opts.key.split(',') ]
        else:
            # well, if we didn't choose a key, then try to import all of them
            selected_keys = keyobjects

        if opts.list:
            print "Activation Keys in file %s" % jsonfile
            keytable(keyobjects)
            sys.exit(0)


        # now we attempt to connect to our satellite/spacewalk server 
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        # global placeholders - we'll be passing these around and manipulating them
        global existing_keys
        global existing_groups
        global existing_channels
        global existing_configchannels

        # now we populate our global objects
        RHN.logDebug("Enumerating existing keys")
        # this is a list of tuples - ( description, key )
        existing_keys = activationkey.listActivationKeyNames(RHN)

        RHN.logDebug("Enumerating existing System Groups")
        existing_groups = [ x['name'] for x in systemgroup.listAllGroups(RHN) ]

        RHN.logDebug("Enumerating existing software channels")
        existing_channels = [ x['label'] for x in channel.listAllChannels(RHN) ]


        for keyobj in selected_keys:
            if (keyobj['description'], keyobj['key']) in existing_keys:
                print "Skipping Existing Activation Key '%(key)s'" % keyobj
                continue
            else:
                if opts.test:
                    print "Would import key %(key)s [%(description)s]" % keyobj
                    continue

                if create_activation_key(RHN, keyobj, opts.interactive, opts.verbose):
                    print "successfully imported activationkey %(key)s" % keyobj
                else:
                    print "Failed to import activationkey %(key)s, trying the next one" % keyobj
                    continue

                

        
    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)

if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python:
