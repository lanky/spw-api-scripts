#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# ** delete as appropriate below **
# requires the python-rhnapi and python-progressbar modules
# also requires PyYAML if you want to use channel grouping
# for syncing/updating whole builds
#
# Copyright 2013 Stuart Sears <stuart.sears@man.com>
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.


# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
import time
import re
from optparse import OptionParser, OptionGroup

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import channel, errata, packages

from progressbar import Counter,Percentage,ProgressBar,Timer,AnimatedMarker,Bar
# ------------------------- Docstring and file info -------------------------- #
__doc__ = """
%s
Synchronises two channels via errata cloning/publishing and package pushing
""" % os.path.basename(__file__)
__author__ = "Stuart Sears <stuart.sears@man.com>"

# -------------------------- RHN API Configuration --------------------------- #

# server hostname and config file location
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# channel group configuration, ordered list, last entry wins
CHANNELMAPS = [ "/etc/sysconfig/rhnapi/channels.yaml", "~/.rhnapi/channels.yaml" ]


# --------------------------- Script Configuration --------------------------- #
# put global variables for the script in here

rhpatt = re.compile('^RH[BES]A-\d{4}:\d{4}(?:-\d)?')

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process and check commandline options and arguments.
    Called against sys.argv[1:] to ignore the script name itself.
    """
    def error(errlines, usage=True, exitcode=1):
        """
        parser-specific error handling
        params:
        errlines(list)      - list (or tuple/set) of lines in error message
        exitcode(int)       - return code for exit statement.
        """
        print "\n".join(errlines)
        parser.print_help()
        sys.exit(exitcode)

    preamble = """Update one channel from another, using errata where possible"""

    usagestr = "%prog [RHNOPTS] -s SOURCE DEST  [--test|--report]"
    
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    changrp = OptionGroup(parser, "Channel Selection options")
    changrp.add_option("-s", "--source",
            help="Source Channel for package and errata updates (calculated if missing)")
    changrp.add_option("-g", "--group","--build", help="Channel group (build) defined in configuration file. Overrides -s, args are assumed to be groups also.")
    changrp.add_option("--group-file", default=CHANNELMAPS,
            help="location of group configuration file in YAML format[%default]")
    changrp.add_option("--test", "--report", dest="test", action="store_true", default=False,
            help="Calculate diff and report without making changes")
    changrp.add_option("-o", "--output", help="output file for saving a generated report. Without this it is printed to stdout")
    parser.add_option_group(changrp)


    # by default
    if len(argv) == 0:
        error(["No options or arguments provided"], True, 0)

    opts, args = parser.parse_args(argv)
    # check the args for errors etc...

    if len(args) != 1:
        error(["ERROR: you must provide a channel to update/synchronise"], True, 1)

    if opts.debug:
        opts.loglevel = 10
    elif opts.verbose:
        opts.loglevel = 20
    else:
        opts.loglevel = 30
    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def errata_report(errdict, errtypes=[]):
    """
    Generates a report summarising errata that would be synchronised

    :param errdict: 
    dict of errata 'dict' objects, indexed on 'advisory'

    :returns list:
    a list of lines that could be printed or written to an output file
    """
    reportlines = []
    if len(errdict.keys()) > 0:
        errlen = max(len(e) for e in errdict.keys())
        errfmt = "%%-%ds %%s" % errlen
        reportlines = [
            errfmt %("Erratum", "Synopsis"),
            errfmt %("=" * errlen, "========"),
        ]
        for err in sorted(errdict.keys(), key=lambda k: k.split('-')[1], reverse=True):
            errsyn = errdict[err].get('synopsis').strip()
            reportlines.append(errfmt % (err, errsyn))

    return reportlines

# ---------------------------------------------------------------------------- #

def package_report(rhn, pkgdict):
    """
    Generates a report summarising packages to synchronise.
    Normally this would be packages that are not provided by an erratum
    :param pkgdict:
    dict of dict, keys are NVRA strings

    :returns list:
    a list of lines that can be printed or written to a file descriptor
    """
    reportlines = []
    if len(pkgdict) > 0:
        pkglen = max(len(x) for x in pkgdict) 
        pkgfmt= "%%-%ds %%s" % pkglen
        reportlines = [
            pkgfmt %("Package", "Summary"),
            pkgfmt % ("=" * pkglen, "======"),
        ]
        for p in pkgdict:
            pkgobj = pkgdict.get(p)
            pkgdet = packages.getDetails(rhn, pkgobj.get('id'))
            reportlines.append(pkgfmt % (p, pkgdet.get('summary').strip()))
            
    return reportlines





def main(argv):    
    """
    This is overcomplicated and should be broken down, really
    """
    opts, args = parse_cmdline(argv[1:])
    destchannel = args[0]

    try:
        RHN = rhnapi.rhnSession(opts.server,
                                opts.login,
                                opts.password,
                                config=opts.config,
                                savecreds=opts.cache,
                                debug=opts.debug,
                                logfile=opts.logfile,
                                logenable=True,
                                logname=os.path.basename(argv[0]),
                                loglevel=opts.loglevel,
                                )
        
        # list packages in source channel - we are specifically interested in
        # the latest versions only.
        destdata = channel.getDetails(RHN, destchannel)
        if not destdata:
            RHN.logError("Channel %s does not appear to exist" % destchannel)
            sys.exit(2)
        dstpkgs = channel.listLatestPackages(RHN, destchannel)

        if not opts.source:
            # use the clone original
            opts.source = destdata.get('clone_original')
            if len(opts.source.strip()) == 0:
                RHN.logError("No source channel provided and the destination has no 'original' source")
                sys.exit(2)
            else:
                RHN.logInfo("Using original channel %s (the clone source of %s) as source" %(
                    opts.source, destchannel))

        srcpkgs = channel.listLatestPackages(RHN, opts.source)

        # extract names for diffing purposes
        srcindex = dict(zip([ "%(name)s-%(version)s-%(release)s.%(arch_label)s" % p for p in srcpkgs ], srcpkgs))
        dstindex = dict(zip([ "%(name)s-%(version)s-%(release)s.%(arch_label)s" % p for p in dstpkgs ], dstpkgs))
        srcerrata = [ e.get('advisory') for e in channel.listErrata(RHN, opts.source) ]

        RHN.logDebug("%d packages in source channel %s" %(len(srcindex),opts.source))
        RHN.logDebug("%d packages in destination channel %s" %(len(srcindex),destchannel))
        pkgdiff = set(srcindex.keys())
        pkgdiff.difference_update(dstindex.keys())
        RHN.logDebug("%d packages in %s but not in %s" %(len(pkgdiff), opts.source,destchannel))

        if len(pkgdiff) > 0:
            # sets for advisory and package names
            errlist = set([])
            nonerrpkgs = set([])
            # a dict containing non-errata packages to sync, indexed on NVRA
            pkgmaps = {}
            # a dict containing sync errata, indexed on advisory
            errmaps = {}
            count = 0
            widgets = ['progress: ', Counter(), '/ %d Packages [' % len(pkgdiff), Percentage(), ']', Bar(), '(', Timer(), ')']
            pbar = ProgressBar(widgets=widgets, maxval=len(pkgdiff), term_width=80).start()
            # process all packages and find the errata providing them, if there are any
            for pkg in pkgdiff:
                count += 1
                pkgobj = srcindex.get(pkg)
                erratalist = packages.listProvidingErrata(RHN, pkgobj.get('id'))
                if len(erratalist) == 0:
                    RHN.logDebug("Package %s does not appear to come from an erratum" % pkg)
                    nonerrpkgs.add(pkg)
                    pkgmaps[pkg] = pkgobj
                else:
                    for e in erratalist:
                        adv = e.get('advisory')
                        if adv in srcerrata:
                            RHN.logDebug("Adding %s to sync list" % adv)
                            errlist.add(adv)
                            errmaps[adv] = e
                        else:
                            RHN.logDebug("Cannot find Erratum %(advisory)s in source channel, ignoring" % e)
                pbar.update(count)
            print
            # to avoid doubled efforts
            errlines = errata_report(errmaps)
            pkglines = package_report(RHN, pkgmaps)

            RHN.logInfo("Found %d Errata to Sync" % len(errlist))
            RHN.logInfo("Found %d packages not provided by errata" % len(nonerrpkgs))
            # replaced to print something useful instead :)
                
            # produce output in test mode only.
            # if we specified an output file, try to open it for writing
            if opts.output and opts.test:
                try:
                    fd = open(opts.output, 'wb')
                    if len(errlines) > 0:
                        print "%d errata found" % len(errlines)
                        fd.write("\n".join(errlines))
                        fd.write("\n")
                    if len(pkglines) > 0:
                        print "%d packages found" % len(pkglines)
                        fd.write("\n".join(pkglines))
                    sys.exit(0)
                except OSError:
                    RHN.logError("Unable to create output file %s" % opts.output)
                    RHN.logError("error was", exc_info=True)
                    print "oops, cannot create output file %s" % opts.output
                    sys.exit(255)
                    
                finally:
                    print "writing output to %s" % opts.output
                    fd.close()
            # test/report mode without output file, print report instead
            elif opts.test:
                if len(errlist) > 0:
                    print "Found %d errata to sync" % len(errlist)
                    print "\n".join(errlines)
                    print "\n"
                else:
                    print "no errata to sync"

                if len(nonerrpkgs) > 0:
                    print "Found %d packages (not from errata) to sync" % len(nonerrpkgs)
                    print "\n".join(pkglines)
                    print "\n"
                else:
                    print "No non-errata packages to sync"
                sys.exit(0)


            else:
                # we are not in test mode, try syncing stuff
                print "Beginning sync process"
                if len(errlist) > 0:
                    # we have errata for syncing
                    cloneme = set(x for x in errlist if rhpatt.match(x))
                    publishme = errlist.difference(cloneme)

                    # This is unlikely as we'll normally just do this for
                    # cusotm channels, but nonetheless
                    if len(cloneme) > 0:
                        res = errata.cloneAsOriginal(RHN, destchannel, list(cloneme))
                        if res:
                            RHN.logInfo("Cloned %d errata into %s" %(len(cloneme), destchannel))
                    if len(publishme) > 0:
                        # we have to publish errata one-by-one
                        # we'll show a progressbar for this
                        widgets = ['Publishing Errata: ', 
                                    Counter(), 
                                    '/ %d [' % len(publishme), 
                                    Percentage(), ']', 
                                    Bar(), 
                                    '(', Timer(), ')']
                        pbar = ProgressBar(widgets=widgets, 
                                           maxval=len(publishme), 
                                           term_width=80).start()

                        for ind, pberr in enumerate(publishme):
                            RHN.logDebug("publishing %s" % pberr)
                            res = errata.publishAsOriginal(RHN, pberr, destchan)
                            if res:
                                RHN.logInfo("Published %s" % pberr)
                            else:
                                RHN.logWarn("Failed to publish %s" % pberr)
                            pbar.update(ind +1)

                if len(nonerrpkgs) > 0:
                    print "adding non-errata packages to channel"
                    RHN.logInfo("Adding non-errata packages")
                    pkgids = [ p.get('id') for p in pkgmaps ]
                    if channel.addPackages(RHN, destchannel, pkgids):
                        RHN.logInfo("Succesfully added %d packages to channel %s" %(len(nonerrpkgs), destchannel))
                    else:
                        RHN.logError("Failed to add pacakges to channel %s. See logs for details" % destchannel)
        else:
            print "Channel package lists are identical, nothing to sync"
                

    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
    
if __name__ == '__main__':
    main(sys.argv)



# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python nofen:
