#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.


__doc__ = """
spw-kickstart-import

a script to import kickstart profiles from a JSON dump file
created by the companion spw-kickstart-export.py script

This script has been tested with RHN satellite 5.4.1 but may have unforseen effects.
Use with caution and backup your satellite database before using it.
"""
__author__ = "Stuart Sears <sjs@redhat.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import sys
import os
import re
from optparse import OptionParser, OptionGroup
from pprint import pprint
from fnmatch import fnmatch

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import kickstart
from rhnapi import activationkey
from rhnapi import configchannel
from rhnapi import systemgroup
from rhnapi import utils

# --------------------------- Script Configuration --------------------------- #

# server hostname and config file location
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# script-specific configuration

# for adding new profiles, we require a root password.
# This is overridden when we set the 'advanced options'
# so can be anything we want. 
TEMP_ROOT_PW = 'iwuebfwoeipfh'

# regex for stripping off org prefixes on activation keys
org_pattern = re.compile(r'(^[\d]+)-(.*)$')
# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Load and import kickstart profiles from a JSON-format text file (created by spw_export_kickstarts)"
    usagestr = "%prog [OPTIONS]... JSONFILE"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
#    parser.add_option("-q", "--quiet", action = "store_true", default = False,
#        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    ksgrp = OptionGroup(parser, "Kickstart-specific options")
    ksgrp.add_option("-g", "--glob", help = "Shell-style glob patterns for kickstart selection and listing") 
    ksgrp.add_option("-k", "--kickstart", help="kickstart label to import from local file. Default: import ALL kickstarts in file")
    ksgrp.add_option("-i", "--interactive", action="store_true", default=False, help="Ask whether to create missing elements [%default]")
    ksgrp.add_option("--list", action="store_true", default=False, help="List matching kickstart labels from the input file and exit. Affected by --kickstart and --glob")
    ksgrp.add_option("--test", action="store_true", default=False, help="DRY RUN. Pretty print data to stdout")
    # disabled these two for the time being as the code hasn"t been written yet
    # ksgrp.add_option("-r", "--replace", action="store_true", default=False, help="replace kickstarts on satellite with those in file (only if names match) DANGEROUS.")
    # ksgrp.add_option("-R", "--rename", action="store_true", default=False, help="offer to rename imported kickstart profiles if there is a name clash.")
    parser.add_option_group(ksgrp)


    opts, args = parser.parse_args()
    # expect the JSON file as first argument
    if len(args) != 1:
        print "ERROR: Insufficient information provided: no FILENAME"
        parser.print_help()
        sys.exit(1)

    elif not os.path.isfile(args[0]):
        print "file %s does not appear to exist." % args[0]
        sys.exit(2)
    # check the args for errors etc...
    if opts.kickstart:
        # convert it to a list
        opts.kickstart = opts.kickstart.split(',')

    ''# finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def set_ks_details(rhn, ksobject, logscripts = False, interactive = False, verbose = False):
    """
    Work through the dict structure representing a kickstart profile, setting the
    various elements on the server.
    This will also create missing items if you let it, specifically
    1. Activation Keys
    during the activation key creation process, we may also create the following,
    if they are missing from the local satellite, but used by the activation key:
        1. system groups (by name)
        2. GPG and/or SSL keys (by name)
    2. Pre and Post Scripts (recreated with content)
    3. File Preservation lists (by name)
    """

    # assuming the object already exists, fetch the label for ease of typing:
    kslabel = ksobject.get('label')
    rhn.logInfo("Processing kickstart label %s" % kslabel)
    #    ksobject['child_channels']        = kickstart.getChildChannels(rhni, kslabel)
    rhn.logDebug("* setting child channel subscriptions")
    if kickstart.setChildChannels(rhn, kslabel, ksobject['child_channels']):
        rhn.logInfo("child channels set")
    #    ksobject['partitioning_scheme']   = kickstart.getPartitioningScheme(rhn, kslabel)
    rhn.logDebug("processing advanced options")
    if kickstart.setAdvancedOptions(rhn, kslabel, ksobject['advanced_opts']):
        rhn.logInfo("advanced options successfully imported")

    rhn.logDebug("setting partitioning scheme")
    if kickstart.setPartitioningScheme(rhn, kslabel, ksobject['partitioning_scheme']):
        rhn.logInfo("Partitioning scheme successfully imported.")

    rhn.logDebug("setting software list")
    if kickstart.setSoftwareList(rhn, kslabel, ksobject['software_list']):
        rhn.logInfo("software list added to kickstart")
    # getCustomOptions returns a list of {'name' : 'custom', 'arguments' : line_content}
    # but setCustomOptions wants a list of str, one per line. Dumb.
    rhn.logDebug("setting custom kickstart options")
    custopts = [ x.get('arguments', '') for x in ksobject['custom_opts'] ]
    if kickstart.setCustomOptions(rhn, kslabel, custopts):
        rhn.logInfo("Custom Options successfully imported")

    rhn.logDebug("adding pre and post scripts")
    for script in ksobject['script_list']:
        res = kickstart.addScript(rhn, kslabel, 
                                  contents = script.get('contents'), 
                                  scripttype = script.get('script_type'), 
                                  chroot = script.get('chroot'), 
                                  interpreter = script.get('interpreter'),
                                  template = script.get('template'))
        if isinstance(res, int):
            rhn.logInfo("added %s script number %d" % (script['script_type'], res))
        else:
            rhn.logErr("failed to add %(type)s script, continuing anyway" % script)
            print res
            continue
    # handle log_post and log_pre being absent from our kickstart object
    log_post = ksobject.get('log_post', False)
    log_pre = ksobject.get('log_pre', False)
    rhn.logDebug("Configuring pre and post script logging")
    if kickstart.setLogging(rhn, kslabel, log_pre, log_post):
        if log_pre:
            rhn.logDebug("successfully enabled %pre script logging")
        if log_post:
            rhn.logDebug("successfully enabled %post script logging")
    else:
        rhn.logErr("Failed to configure pre and post script logging")
    rhn.logDebug("importing IP ranges for bare-metal kickstart")
    for iprange in ksobject['ip_ranges']:
        if kickstart.addIpRange(rhn, kslabel, iprange['min'], iprange['max']):
            rhn.logInfo("added ip range %(min)s-%(max)s" % iprange)
        else:
            rhn.logErr("failed to add ip range %(min)s-%(max)s, continuing" % iprange)
            continue

    rhn.logDebug("importing custom variable list")
    if kickstart.setVariables(rhn, kslabel, ksobject['variable_list']):
        rhn.logInfo("sucessfully imported custom variables. Please check them for sanity")
    #    ksobject['reg_type']              = kickstart.getRegistrationType(rhn, kslabel)
    rhn.logDebug("setting post-build registration type")
    if kickstart.setRegistrationType(rhn, kslabel, ksobject['reg_type']):
        rhn.logInfo("sucessfully set post-build registration to %(reg_type)s" % ksobject)
    #    ksobject['file_preservations']    = kickstart.listFilePreservations(rhn, kslabel)
    rhn.logDebug("importing file preservations")
# abstract this
    if len(ksobject['file_preservations']) != 0:
        add_fpres = []
        for fpres in ksobject['file_preservations']:
            if fpres['name'] in existing_file_preservations:
                add_fpres.append(fpres['name'])
            else:
                if interactive:
                    res = utils.promptConfirm('create missing file preservation list %(name)s' % fpres) 
                else:
                    res = True

                if res:
                    if kickstart.createFilePreservation(rhn, fpres['name'], fpres['file_names']):
                        rhn.logInfo("file preservation list %(name)s created" % fpres)
                        # add it to the global list for future use
                        existing_file_preservations.append(fpres['name'])
                        # add it to our list
                        add_fpres.append(fpres['name'])
                    else:
                        print "could not create missing file preservation list %(name)s, skipping" % fpres
                        continue
# end of file preservation creation bits                    
        # now we have a list of existing preservations to add, let's add them!
        for fp in add_fpres:
            if kickstart.addFilePreservations(rhn, kslabel, [ fp ]):
                rhn.logInfo("added file preservation '%s'" % fp)
            else:
                rhn.logErr("unable to add file preservation %s, skipping" % fp)
                    

    if ksobject['config_mgmt']:
        rhn.logDebug("enabling configuration management")
        if kickstart.enableConfigManagement(rhn, kslabel):
            rhn.logInfo("COnfiguration Management enabled")

    if ksobject['remote_cmds']:
        rhn.logDebug("enabling remote commands")
        if kickstart.enableRemoteCommands(rhn, kslabel):
            rhn.logInfo("Remote Commands Enabled")
    #    ksobject['activation_keys']       = kickstart.getActivationKeys(rhn, kslabel)
    # run through the activation keys in our stored kickstart structure
    # 1. if they exist in the satellite, add them to the kickstart
    # 2. if they don't exist, try to create them in the satellite first
    # 3. else, FAIL and say so

    rhn.logDebug("processing activation keys")
    for akey in ksobject['activation_keys']:
        # assume existing keys with the correct 'name' and 'description' are okay.
        if (akey['description'], akey['key']) in existing_activation_keys:
            rhn.logInfo("activation key '%(description)s' (%(key)s)  exists on your satellite, adding it to the kickstart" % akey)
            if kickstart.addActivationKey(rhn, kslabel, akey['key']):
                rhn.logInfo("successfully added key %(key)s" % akey)
        else:
            if interactive:
                res = utils.promptConfirm("activation key '%(description)s (%(key)s)' does not appear to already exist. Create it?" % akey)
            else:
                res = True
            if res:
                if create_activation_key(rhn, akey, interactive, verbose):
                    kickstart.addActivationKey(rhn, kslabel, akey['key'])
                else:
                    rhn.logErr("key %s does not exist and we couldn't create it. Skipping it.")
                    continue

    #    ksobject['gpg_ssl_keys']          = kickstart.listKeys(rhn, kslabel)
    rhn.logDebug("processing GPG and SSL keys")
    # run through the crypto keys in our kickstart JSON structure and
    # 1. check if they already exist in satellite.
    # 2. if so, add them to our kickstart
    # 3. if not, try to create them first, then add them to the kickstart
    # 4. finally, FAIL and say so.
    for akey in ksobject['gpg_ssl_keys']:
        if akey in existing_crypto_keys:
            rhn.logDebug("using existing key %(description)s" % akey)
            if kickstart.addCryptoKeys(rhn, kslabel, akey['description']):
                rhn.logInfo('added key "%(description)s"' % akey)
        # if it doesn't already exist, create it
        elif create_crypto_key(rhn, akey, interactive, verbose):
            rhn.logInfo("created new stored cryptokey %(description)s" % akey)
            if kickstart.addCryptoKeys(rhn, kslabel, akey['description']):
                rhn.logDebug('added key "%(description)s"' % akey)
        else:
            rhn.logDebug("key %(description)s does not exist and I couldn't create it. skipping..." % akey)
            continue
            
# ---------------------------------------------------------------------------- #

def create_kickstart_tree(rhn, treeobj):
    """
    Create a kickstartable distribution using the provided dict object
    """
    rhn.logInfo("Attempting to create kickstart distribution %(label)s" % treeobj)
    if kickstart.createTree(rhn, treeobj.get('label'), 
                            treeobj.get('abs_path'), 
                            treeobj.get('channel_label'), 
                            treeobj['install_type']['label']):
        return True
    else:
        rhn.logError("error creating tree %(label)s" % treeobj)
        return False

# ---------------------------------------------------------------------------- #

def create_activation_key(rhn, keyinfo, interactive = False, verbose = False):
    """
    creates an activation key from a dict structure.
    This is complex... we have to
    1. create the key
    2. add base and child software channels
       - if they don't already exist with the correct labels,
         this will fail :)
    4. set config management options and channels
       - missing config channels are skipped
    5. set group memberships
       - missing groups are created by name
    """
    rhn.logInfo("creating activation key '%(description)s' (%(key)s)" % keyinfo)

# remove the org prefix from the key (the satellite will add this for us)
# if our key starts with NUMBER(S)-, this represents the org. Strip them off.
# this is fairly simplistic, but should do the trick most of the time, as we are only really
# expecting to import keys from a file whose format we control.
    rematch = org_pattern.match(keyinfo['key'])
    if rematch:
        rhn.logDebug("* Removing org prefix from key for import.")
# the groups will look like this in a matching key:
# key: 1-7880d5086175346802f137fed1dafe2f, groups = ('1', '7880d5086175346802f137fed1dafe2f')
# regex is used to allow for
# 1. non-org keys (just in case)
# 2. orgs >= 10
        mykey = rematch.groups()[1]

    # now try to create it. There is more than one way to do this, depending on
    # whether you specify a usage limit or not.
    keyid = activationkey.create(rhn,
                                 keyinfo['description'],
                                 mykey,
                                 basechannel=keyinfo['base_channel_label'])
    
    if keyid:
        rhn.logDebug("key %(key)s created" % keyinfo)

        if len(keyinfo['entitlements']) > 0:
            rhn.logInfo("Adding entitlements '%s' to key" % ','.join(keyinfo['entitlements']) )
            if activationkey.addEntitlements(rhn,keyid, keyinfo['entitlements']):
                rhn.logDebug("Entitlements set appropriately")

        # add the key to our global activation key list to avoid having to do this again
        existing_activation_keys.append( (keyinfo['description'], keyid) )

        if len(keyinfo['child_channel_labels']) > 0:
            rhn.logInfo("Adding child software channels")
            if activationkey.addChildChannels(rhn, keyid, keyinfo['child_channel_labels']):
                rhn.logDebug("child channels successfully added")
            
        if len (keyinfo['packages']) > 0:
            rhn.logInfo("Adding packages")
            # add packages one at a time to aid logging
            for pkg in keyinfo['packages']:
                if activationkey.addPackages(rhn, keyid, [ pkg ]):
                    try:
                        rhn.logDebug("* %(name)s [%(arch)s] added" % pkg )
                    except KeyError:
                        rhn.logDebug("* %(name)s added" % pkg)
                else:
                    rhn.logError("ERROR: Failed to add package %(name)s - does it exist?" % pkg)

        # add configuration channels to the key (if they exist)

        rhn.logInfo("adding (existing) configuration channels to activation key")
        configlabels = []

        # check that the config channels exist
        for chan in keyinfo['config_channels']:
            if configchannel.channelExists(rhn,chan['label']):
                rhn.logDebug("Configuration channel %(label)s exists, appending to our 'add' list" % chan)
                configlabels.append(chan['label'])
            else:
                rhn.logError("ERROR: config channel label %(label)s does not exist locally, skipping it." % chan)
                continue

# did we find any of the specified configuration channels?
        if len(configlabels) != 0:        
            if activationkey.addConfigChannels(rhn, [ keyid ], configlabels):
                for c in configlabels:
                    rhn.logDebug("added configuration channel %s to key" % c)

# process the config deployment checkbox (value = 1/0)
        if keyinfo['config_deploy'] == 1:
            if activationkey.enableConfigDeployment(rhn, keyid):
                rhn.logInfo("* Enabled config deployment")
        else:
            if activationkey.disableConfigDeployment(rhn, keyid):
                rhn.logInfo("* Disabled config deployment")
# process system groups - create them by name if missing on the local satellite
# prompt for confirmation of this if in --interactive mode
        rhn.logInfo("Processing system group memberships")
        if keyinfo.has_key('server_groups'):
            add_groups = []
            for grp in keyinfo['server_groups']:
                if grp['name'] in existing_system_groups:
                    rhn.logInfo("- Server Group %(name)s already exists, adding it" % grp )
                    add_groups.append(grp)
                else:
                    rhn.logWarn("server group %(name)s does not exist" % grp)
                    # are we in interactive mode? This is passed all the way own from our commandline options
                    if interactive:
                        res = utils.promptConfirm('create missing system group %s (%s)' % (grp['name'], grp['description']))
                    else:
                        res = True
                   
                    if res:
                        rhn.logInfo("Creating missing system group %(name)s" % grp)
                        newgrp = create_group(rhn, grp)
                        if newgrp is not None:
                            rhn.logDebug("Group '%(name)s' created" % newgrp)
                            existing_system_groups.append(newgrp['name'])
                            add_groups.append(newgrp)
                        else:
                            rhn.logError("could not create group %(name)s, skipping" % grp)
                            continue
            for grp in add_groups:
                rhn.logDebug("Adding existing system groups to key")
                if activationkey.addGroupsByName(rhn, keyid, grp['name']):
                    rhn.logDebug("added group %(name)s" % grp)
        else:
            rhn.logInfo("No system group memberships specified.")
        return True
    else:
        return False

# ---------------------------------------------------------------------------- #

def create_group(rhn, groupinfo):
    """
    creates a system group (by name & description) if it doesn't already exist
    """
    groupdata =  systemgroup.create(rhn, groupinfo['name'], groupinfo['description']) 
    if groupdata is not None and groupdata is not False:
        return groupdata

    else:
        return None

# ---------------------------------------------------------------------------- #

def create_crypto_key(rhn, keyinfo, interactive = False, verbose = False):
    """
    creates a new crypto key so we can add it to a kickstart
    """
    return kickstart.createCryptoKey(rhn, keyinfo['description'], keyinfo['type'], keyinfo['content'])

# ---------------------------------------------------------------------------- #

def remove_ks(rhn, kslabel):
    """
    For deleting kickstart profiles that already exist.
    NOT USED YET
    """
    return kickstart.deleteProfile(rhn, kslabel)

# ---------------------------------------------------------------------------- #

def create_ks(rhn, ksobject, verbose = False):
    """
    Create a new basic KS profile with the bare minimal info
    createProfile(rhn, ksLabel, ksTree, rootPass, ksHost='', vtType='none')
    """
    return kickstart.createProfile(rhn, ksobject['label'], ksobject['tree_label'],TEMP_ROOT_PW)

# ---------------------------------------------------------------------------- #

def rename_ks(ksobject, newname, verbose = False):
    """
    renames a kickstart object we have loaded locally to avoid name clashes
    This sort-of assumes that the name is the same as the label. Oh, well.
    NOT USED YET
    """

    if verbose:
        print "renaming %s to %s" %(ksobject['label'], newname)

    ksobject['label'] = newname
    ksobject['name'] = newname
    
    return ksobject
    
# ---------------------------------------------------------------------------- #

def ks_table(ksobjlist):
    """
    Produce a pretty table from a list of kickstart objects
    """
    maxlen = utils.getMaxLen(ksobjlist)
    # use our dict of field lengths to produce a format string for each line
    fmtstr = "%%(label)-%(label)ds %%(name)-%(name)ds %%(tree_label)s" % maxlen
    # print a header
    print fmtstr % {'label' : 'Label', 'name' : 'Name', 'tree_label': 'Kickstart Tree'}
    print fmtstr % {'label' : '-----', 'name' : '----', 'tree_label': '--------------'}
    # for each kickstart, print out a formatted line:
    for ksobj in ksobjlist:
        print fmtstr % ksobj


# ---------------------------------------------------------------------------- #

def enumerate_actkeys(rhn):
    """
    parse and return a list of existing activation key names and contents
    """
    react_re = re.compile(r".*re-?activation key.*", re.I)
    rhn.logInfo("Enumerating activationkeys")
    keylist = activationkey.listActivationKeys(rhn)
    rhn.logDebug("stripping out reactivation keys")
    return [ (k.get('description'), k.get('key')) for k in keylist if not react_re.match(k.get('description'))]


# ---------------------------------------------------------------------------- #

def enumerate_kstrees(rhn):
    """
    Parse and return a list of kickstart distributions
    """
    chan_re = re.compile(r"^rhel-.*", re.I)
    distro_re = re.compile(r"^ks-rhel.*", re.I)
    distros = []
    rhn.logInfo("Enumerating kickstart distributions")
    # unfortunately we have to wade through 2 separate steps for this.
    kschannels = [ c for c in kickstart.listKickstartableChannels(rhn) if not chan_re.match(c.get('label')) ]
    rhn.logDebug("Found %d non-RH kickstartable Channels" % len(kschannels))
    for chan in kschannels:
        kstrees = kickstart.listKickstartableTrees(rhn, chan.get('label'))
        if len(kstrees) > 0:
            distros.extend([ t for t in kstrees if not distro_re.match(t.get('label')) ])
    rhn.logDebug("Found %d custom kickstart distributions" % len(distros))
    return distros

# ---------------------------------------------------------------------------- #

def enumerate_cryptokeys(rhn):
    """
    Returns a detailed list of all GPG and SSL keys imported into the satellite
    """
    keylist = []
    for cryptokey in kickstart.listAllCryptoKeys(rhn):
        rhn.logDebug("Fetching info for %(type)s key %(description)s" % cryptokey)
        keylist.append(kickstart.getCryptoKeyDetails(rhn, cryptokey.get('description')))
    return keylist


# ---------------------------------------------------------------------------- #

def main():
    """
    This script is intended to do the following:
    1. load a list of kickstart structures from a JSON file (exported by its companion script, kickstart2json)
    2. create these profiles on the local satellite
    Steps required...
    * do the Activation Keys specified already exist?
    * do the GPG / SSL keys exist?
    - if not, create them
    * do the relevant kickstart trees / channels exist already?
    - if not, FAIL. (nicely)
    - is the org the same?
    * does the kickstart already exist?
    - support renaming or replacement.
    then...
    - create the profile
    - set the various detail elements
    - check it all works
    """
    
    opts, args = parse_cmdline(sys.argv)
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
        # variables for existing server info
        global existing_activation_keys
        global existing_crypto_keys
        global existing_system_groups
        global existing_file_preservations
        global existing_kickstart_trees

        ## --- first, we work with the JSON file - we may not need to connect to RHN at all --- ##
        # there are a number of tasks we can perfom which only require the local JSON file:

        ksobjects = utils.loadJSON(args[0])
        import_labels = [ x.get('label') for x in ksobjects ]

        # if --list, we just read the data and dump a list of labels:

        # did we choose a kickstart profile (or list of them?)
        if opts.kickstart:
            import_list = [ x for x in ksobjects if x['label'] in opts.kickstart ]

        # if not, did we provide a glob pattern?            
        elif opts.glob:
            import_list = [ x for x in ksobjects if fnmatch(x['label'], opts.glob) ]

        # failing that, we try to import all kickstarts from the JSON file            
        else:
            import_list = ksobjects

        # do we only want to print out matching profiles?
        if opts.list:
            ks_table(import_list)
            sys.exit(0)


        if opts.test:
            for ksitem in import_list:
                print '## ------------- Kickstart Details for %(label)s ----------------- ##' % ksitem
                pprint(ksitem)
                print
            sys.exit(0)


        # -- connect to RHN Satellite Server --- #
        if opts.verbose:
            print "Connecting to satellite server %s" % opts.server
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        RHN.logInfo("Gathering information about existing elements")
        # get a list of existing kickstart profiles
        RHN.logInfo("Existing kickstarts")
        # this doesn't need to be global, we're only using it here...
        all_kickstarts = kickstart.listKickstarts(RHN)
        # suck just the labels out as these have to be unique
        remote_labels = [ x.get('label') for x in all_kickstarts ]
        # extreme debuggery output
        RHN.logInfo("Found %d Kickstart Pofiles" % len(remote_labels))
        for l in remote_labels:
            RHN.logDebug("Existing Kickstart: %s" % l)

        RHN.logInfo("Existing activation keys (can take a long time)")
        # make our list of activation keys accessible to all methods:
        existing_activation_keys = enumerate_actkeys(RHN)
        for k in existing_activation_keys:
            RHN.logDebug("Existing Key: %s [%s]" % k)

        RHN.logInfo("Existing Crypto (GPG and SSL) keys")
        existing_crypto_keys = enumerate_cryptokeys(RHN)
        for k in existing_crypto_keys:
            RHN.logDebug("Existing %(type)s Key: %(description)s " % k)

        RHN.logDebug("Existing system groups.")
        # we only care about the names...
        existing_system_groups = [ x['name'] for x in systemgroup.listAllGroups(RHN) ]
        RHN.logDebug("Found %d system groups" % len(existing_system_groups))

        RHN.logDebug("Existing File Preservation Lists")
        # we only care about the names...
        existing_file_preservations = [ x['name'] for x in kickstart.listAllFilePreservations(RHN) ]
        RHN.logDebug("Found %d File Preservation Lists" % len(existing_file_preservations))
        for fp in existing_file_preservations:
            RHN.logDebug("Existing File Preservation: %s" % fp)

        existing_ks_trees = enumerate_kstrees(RHN)
        for kd in existing_ks_trees:
            RHN.logDebug("KS Distribution: %(label)s" % kd)
        existing_ks_tree_labels = [ t.get('label') for t in existing_ks_trees ]

        # ----------------- Now work with the JSON file ------------------------ #

        # okay, did we provide a filename and does it exist?
        # if so, load it and read in the kickstart data:

        # now for the big job....
        for ksobject in import_list:
            if ksobject['label'] in remote_labels:
                RHN.logErr("kickstart label %(label)s already exists, skipping" % ksobject)
                continue
            if ksobject['tree_label'] in existing_ks_tree_labels:
                RHN.logWarn("Kickstart distribution %(tree_label)s already exists, using it." % ksobject )
                RHN.logWarn("Be sure to check it points to the correct installation tree.")
            else:
                treeobj = ksobject.get('ks_tree')
                if not create_kickstart_tree(RHN, treeobj):
                    RHN.logError("error creating tree %(label)s - you may need to create this manually" % treeobj)
                    sys.exit(1)

            # for debuggery
        #    sys.exit(0)
            if create_ks(RHN, ksobject):
                set_ks_details(RHN, ksobject, opts.interactive, opts.verbose)
                
            else:
                RHN.logErr("unable to create kickstart %(label)s" % ksobject)

        
    except KeyboardInterrupt:
        print "operation cancelled"
        sys.exit(1)

# ---------------------------------------------------------------------------- #

if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 nofen ft=python:
