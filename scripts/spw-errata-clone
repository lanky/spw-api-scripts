#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi and python-progressbar modules
# plus YAML support from PyYAML
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-errata-clone

An errata cloning/publishing script intended to
1. take a list of errata and channel labels
2. *clone* RH errata into one channel
   - then publish the clones into the other channels
3. publish the non-RH errata into all selected channels.
4. maps the selected cloned channes back their origin channels
   using our YAML config

Currently no checking if an erratum has already been cloned
- this probably requires RHN DB usage

for specific packages you can get lists of providing errata
using the spw-package-listerrata script
"""

__author__ = "Stuart Sears <stuart@sjsears.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
from optparse import OptionParser, OptionGroup
import re
from pprint import pprint

# ------------------------ Non-standard / thirdparty ------------------------- #
try:
    import yaml
    has_yaml = True
except ImportError:
    has_yaml = False

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import errata
from rhnapi import channel

# --------------------------- Script Configuration --------------------------- #
# config file location and server hostname
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication info
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# script-specific customisation
rh_pattern = re.compile('^RH(SA|BA|EA)-.*')

# channel mappings
# CHANNELMAPS = os.path.expanduser("~/.rhnapi/channels.yaml")
CHANNELMAPS = "~/.rhnapi/channels.yaml"

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Clone the specified list of errata (or publish already cloned errata) from one channel to another"
    usagestr = "%prog [RHNOPTS] -c CHANNEL ERRATUM..."
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    # I have no idea why anyone would do this, but it's been here historically, so it stays
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # option group for non-generic options
    errgrp = OptionGroup(parser, "Errata and Channel Options")
    errgrp.add_option("-c", "--channel",
        help="Channel LABEL to clone or publish errata to. Can be a comma-separated list. No spaces")
    errgrp.add_option("--test", action="store_true", default=False,
            help="Display errata that would be cloned/published")
    errgrp.add_option("-g", "--channel-group", "--build", dest="build",
            help="a channel group (group of cloned channels and their sources), selected from our channel config file. Overrides --channel")
    errgrp.add_option("-m", "--channel-maps", default=CHANNELMAPS,
            help="path to channel mapping file [default: %default ] (maps clones to RH original channels, grouped by build). YAML format.")
# not yet implemented    
#    errgrp.add_option("-l", "--list", action="store_true", default=False, 
#            help="list channel groups from configuration file, if there is one.")

    parser.add_option_group(errgrp)


    if len(argv) == 0:
        parser.print_help()
        sys.exit(0)

    opts, args = parser.parse_args(argv)

    if not opts.build and not opts.channel:
        print "ERROR: I need at least one channel to publish/clone errata into"
        sys.exit(1)

    # check the args for errors etc...
    if opts.debug:
        opts.loglevel = 10
    elif opts.verbose:
        opts.loglevel = 20
    else:
        opts.loglevel = 30

    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def load_channel_maps(mapfile):
    """
    Loads the chosen maps file using YAML
    returns a dict structure, grouped by "build"
    """
    try:
        fd = open(mapfile, 'rb')
        data = yaml.load(fd)
        fd.close()
    except IOError, E:
        print "Cannot open %s" % mapfile, "" % E.strerror
        data = None
    except OSError, E:
        print "Cannot open %s" % mapfile, "" % E.strerror
        data = None

    return data

# ---------------------------------------------------------------------------- #

def main():
    """
    Core script functionality
    The process:
    get a list of pacakges and affected channels from the erratum
    clone each redhat erratum once, into the 


    """
    opts, args = parse_cmdline(sys.argv[1:])



    # initialise an RHN Session
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, 
                                savecreds=opts.cache, 
                                debug=opts.debug,
                                logfile = opts.logfile, 
                                logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), 
                                loglevel=opts.loglevel,
                                )
        # default values to be sure they're defined
        chandata = None
        grpdata  = None


# ----------------- FIGURE OUT CHANNEL SOURCES (FOR CLONES) ------------------ #
        grpchans = {}
        if opts.build:
            if has_yaml:
                chandata = load_channel_maps(os.path.expanduser(opts.channel_maps))
                grpdata = chandata.get(opts.build)
                # now let's munge this into a list of source => clone dict entries
                grpchans = { grpdata.get('source') : grpdata.get('label') }
                for cdict in grpdata.get('children'):
                    grpchans[cdict.get('source')] = cdict.get('label')
            else:
                print "Python YAML support not available. Perhaps you need to install PyYAML?"
                chandata = None
                grpdata = None

            # If we have asked for a 'build' or 'channel group' and it doesn't exist, barf.
            if grpdata is None:
                print "No group information for %s found. Please check inputs and configuration" % opts.build
                sys.exit(1)

        # alternatively, we could have provided a list of channels on the commandline
        elif opts.channel:
            for chan in opts.channel.split(','):
                chaninfo = channel.getDetails(RHN, chan)
                if chaninfo:
                    src = chaninfo.get('clone_original').strip()
                    if src != '':
                        grpchans[src] = chan.strip()
                    else:
                        # The cloning/publishing parts will fail on non-cloned channels.
                        RHN.logWarn("WARN: skipping non-cloned channel %s (not supported by clone/publishAsOriginal)" % chan)
                        print "Cannot use non-cloned channel %s, skipping" % chan
                        continue
                else:
                    RHN.logError("Unable to retrieve details for channel %s" % chan)
                    print "Failed to retrieve details for channel %s. Does it exist?" % chan
                    sys.exit(3)
        else:
            # we really shouldn't get here, but...
            RHN.logErr("No channels to work with. No idea how that happened")
            sys.exit(255)

        channel_list = set(grpchans.values())

# ---------- FIGURE OUT WHICH CHANNELS ARE AFFECTED BY WHICH ERRATA ---------- #

        RHN.logDebug("Working with channel list: %s" % channel_list)

        errata_list = args

        # a dict mapping errata => target channels
        errchannels = {}

        # This is for cloning only
        # a dict mapping channels to applicable errata
        channelerr = {}

        err_to_publish = []
        err_to_clone = []

        # work through the errata we provided and find which channels they affect
        for erratum in errata_list:
            # first, get the affected channels
            affected_channels = set()
            errpkgs = errata.listPackages(RHN, erratum)
            if errpkgs:
                for p in errpkgs:
                    # add providing channels
                    affected_channels.update(set(p.get('providing_channels')))
            else:
                msg = "Unable to list packages for erratum %s, skipping." % erratum
                RHN.logError(msg)
                print msg
                continue

            # this is clumsy
            target_channels = [ grpchans.get(c) for c in affected_channels if c in grpchans.keys() ]
            # debug output
            # add these target channels to each erratum
            errchannels[erratum] = sorted(target_channels)

# ---------------- SPLIT ERRATA INTO CLONE AND PUBLISH LISTS ----------------- #
                    
            if rh_pattern.match(erratum):
                RHN.logDebug("Adding RH Erratum %s to cloning list" % erratum)
                err_to_clone.append(erratum)
            else:
                RHN.logDebug("Adding already cloned erratum %s to publishing list" % erratum)
                err_to_publish.append(erratum)
            if opts.debug:
                print "ERR: %s" % erratum
                # print "\n".join([x for x in target_channels if x is not None ])
                print "\n".join(target_channels)
                print "--"
# ----------------------------- debuggery output ----------------------------- #
#        print "Errata to clone: ", err_to_clone
#        print "Errata to publish", err_to_publish

# --------------------- MAP CLONED CHANNELS TO RH ERRATA --------------------- #
        # an experiment, list channels and errata that can be cloned into them
        for err in err_to_clone:
            # should return a list of channels
            for chan in errchannels.get(err):
                if channelerr.has_key(chan):
                    channelerr[chan].append(err)
                else:
                    channelerr[chan] = [ err ]
        # instantiate a new empty dictionary for reporting and comparison
        newerrata = dict.fromkeys(channelerr.keys(), [])

        if opts.test:
            print "TEST MODE, reporting only"
            errfmt = "%-14s %s"
            if len(err_to_clone) > 0:
                print "Errata to be cloned"
                print errfmt %("erratum", "target channels")
                print errfmt %("==============", "===============")
                for err in err_to_clone:
                    print errfmt % ( err, ','.join(set(errchannels.get(err))))
            if len(err_to_publish) > 0:
                print "Errata to be Published"
                print errfmt %("erratum", "target channels")
                print errfmt %("==============", "===============")
                for err in err_to_publish:
                    print errfmt % ( err, ','.join(set(errchannels.get(err))))

            # we're all done now, ta.
            sys.exit(0)                    




        # so, first we clone into our first channel, then publish into any others
        if len(err_to_clone) != 0:
            # cloning is a many errata => one channel operation.
            # we'll use the channelerr dict to map these
            # which is a dict of channel => errata mappings
            # { 'destchannel' : [ 'err1', 'err2' ...], ... }

            # as it turns out, cloneAsOriginal has no effect on channels where the
            # erratum doesn't apply, but it does create a clone anyway

# -------------------- CLONE ERRATA ONE CHANNEL AT A TIME -------------------- #

            for chan, errlist in channelerr.iteritems():
                # this is actually good enough for the cloning process
                # as re-cloning into a second applicable channel just publishes the original erratum
                # appropriately.

                # This will explode if we try to do clone into a non-cloned channel
                newclones = errata.cloneAsOriginal(RHN, chan, errlist)
                RHN.logInfo("cloned %d errata into channel %s" %(len(newclones), chan))
                newerrata[chan].extend(newclones)

# ------------------- PUBLISH CLONED ERRATA ONE AT A TIME -------------------- #
        if len(err_to_publish) != 0:
            # we should use the errchannels bit here.
            for err, chanlist in errchannels.iteritems():
                if err in err_to_publish:
                    newerr = errata.publishAsOriginal(RHN, err, chanlist)
                    RHN.logInfo("Published erratum %s into channels [ %r ]" %( newerr.get('advisory_name'), chanlist))
                    for chan in chanlist:
                        newerrata[chan].append(newerr)
        pprint(newerrata)                        

# --------------------------- REPORT WHAT YOU DID ---------------------------- #
        print "Cloned/Published errata as follows:"
        fmtstr = "%%-%ds\n--\n%%s" % max(len(c) for c in newerrata.keys())
        for chan, errlist in newerrata.iteritems():
            print fmtstr % (chan, ','.join(set(e.get('advisory_name')) for e in errlist))
        


                    

    
    except KeyboardInterrupt:
        print "operation cancelled"
        sys.exit(1)

if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python:
