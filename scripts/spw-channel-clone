#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears / Steven Hardy
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.


__doc__ = """
spw_clone_channel

A script to clone a channel in your RHN Satellite, with or without errata.
Can recursively clone channels with all their children

This requires the presence of the 'rhnapi' module on your PYTHONPATH.
"""

__author__ = "Stuart Sears / Steven Hardy"

# --------------------- Python Standard Library Modules ---------------------- #
import sys
import os
from optparse import OptionParser, OptionGroup
import re
import time

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import channel
from rhnapi import utils
from pprint import pprint


# ---------------------- Script Configuration Settings ----------------------- #

# server hostname and config file
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# authentication info
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# general configuration
# regex pattern/replacement delimiter
DELIM = '/'

# defaults for label -> name generation
CAPWORDS = [ 'rhn', 'rhel', 'as', 'es', 'ws', 'lgb' ]
ARCHWORDS = [ 'i386', 'x86_64' ]


# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = """Clone a channel in your RHN Satellite. Supports recursion and
generation of clone labels through regex substitution or adding a prefix or suffix (or all three)
Regex substitution is applied before prefix or suffix additions.
"""
    usagestr = "%prog [OPTIONS] [-p PARENT] -c SOURCECHANNEL [ -d DESTCHANNEL ]"

    # intitialise our parser instance and set some core options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options",
        "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )

    rhngrp.add_option("--server", default=RHNHOST,
        help="RHN satellite server hostname [%default]")
    rhngrp.add_option("--login", default=RHNUSER, help="RHN login (username)")
    
    rhngrp.add_option("--pass", dest = "password", default=RHNPASS,
        help="RHN password. This is better off in a config file.")
    
    rhngrp.add_option("--config", dest = "config", 
        help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    
    rhngrp.add_option("-C", "--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")

    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # Channel Specification
    changrp = OptionGroup(parser, "Channel Options")
    changrp.add_option("-c","--source-channel", dest = "source", default=None,
        help = "source channel LABEL")

    changrp.add_option("-d","--dest-channel", dest = "dest",
        help = """destination channel LABEL (if only cloning a single channel)""")

    changrp.add_option("-r", "--recursive", action = "store_true", default=False, 
        help = "clone recursively, e.g a channel and all its children. Conflicts with -d")

    changrp.add_option("-p","--parent", default=None,
        help="parent for cloned channel. Your new channel will be a base channel without this.")

    changrp.add_option("-n", "--name", default = None,
        help = "The human-readable channel name. This will be calculated from the label if omitted.")

    changrp.add_option("-s","--summary", default = None,
        help="Channel Summary - generated from dest label if omitted.")

    changrp.add_option("-N","--no-errata", dest = "noerrata", default=False,
        help="do not clone errata [%default]", action="store_true")

    changrp.add_option("-x","--regex", dest = "regex", default=None,
        help = """sed-syntax regex ('PATTERN/REPLACEMENT') to formulate the destination channel labels
by doing a regex replacement on source channel label(s), useful for --child clones where no prefix is desired""")

    changrp.add_option("-D", "--delimiter", default = DELIM,
        help = "single-character delimiter to use in the expression passed to --regex. default is '%default'.")

    changrp.add_option("-P", "--prefix", default = None,
        help = "prefix for generated clone channels. Results in PREFIX-label")

    changrp.add_option("-S", "--suffix", default = None,
        help = "prefix for generated clone channels. Results in label-SUFFIX")

    changrp.add_option("--exclude", help = "comma-separated list of channel labels to exclude when cloning recursively")

    changrp.add_option("--test", action = "store_true", default = False,
        help = "simply report the clones that would be created and exit")

    parser.add_option_group(changrp)


    # process and sanitise options if needed:
    def error(lines, ecode=1):
        """
        Error process
        takes a list of lines and an optional exit code
        """
        print '\n'.join(lines)
        parser.print_help()
        sys.exit(ecode)

    opts, args = parser.parse_args()
    if opts.source is None:
        error(["ERROR: Insufficient information"
               "no source channel label provided"])
    
    if not opts.dest:
        if not ( opts.regex or opts.prefix or opts.suffix):
            error([ "ERROR: Insuffient information",
                    "You must provide either a destination channel label",
                    "or at least one of --regex, --prefix, or --suffix"])

    elif opts.recursive:
        error( ["ERROR: Conflicting options",
                "You specified both --dest-channel and --recursive",
                "I have no idea what you want me to do"])

    if opts.parent and opts.recursive:
        error( ["ERROR: Conflicting options",
                "--recursive cloning and --parent do not mix",
                "Please specify only one of these."])

    if opts.exclude:
        if not opts.recursive:
            error( ["ERROR: Missing option",
                    "--exclude requires -r/--recursive operation"])
        else:
            opts.exclude = opts.exclude.split(',')

    if opts.delimiter:
        if len(opts.delimiter) != 1:
            error([ "ERROR: Syntax error",
                    "regex delimiters must be a single character"])

    return opts, args

# ---------------------------------------------------------------------------- #

def label_to_name(label, capwords = CAPWORDS, archwords = ARCHWORDS):
    """
    perform some basic substitutions on a string to make it suitable for a channel Name, rather than a label
    Essentially, this removes all the hyphens, uppercases RHEL, RHN, ES, AS, WS, title cases the rest.
    """
    # capwords = [ 'rhn', 'rhel', 'as', 'es', 'ws', 'lgb' ]
    # at the moment these are the only arches we have...
    # arches = [ 'i386', 'x86_64' ]
    output = []
    for word  in re.split('[-\s]', label):
        if word in capwords:
            output.append(word.upper())
        elif word in archwords:
            output.append(word)
        else:
            output.append(word.capitalize())
    return ' '.join(output)

# ---------------------------------------------------------------------------- #

def generate_clone_labels(srcchans, logger, regex = None, prefix = None, suffix = None, delimiter = DELIM):
    """
    parses a list of channel dicts and adds a clone_label key,
    containing a munged label for the cloning process.

    Munging is performed in this order, the result of each feeding into the next
    1. regex substitution (if any)
    2. prefix (if any)
    3. suffix (if any)

    Any combination of these is accepted, but the order is fixed, so providing all 3 will give
    <prefix>-<regex-subbed-original>-<suffix>
    """
    results = []
    # the simplest option:
    if regex:
        logger.debug("using supplied regex %s" % regex)
        p, repl = regex.split(delimiter)
        patt = re.compile(r'%s' % p.decode('string-escape'))
    for s in srcchans:
        src = s.get('label')
        res = [ src ]
        logger.debug("calculating clone label for %s" % src)
        if regex:
            dst = patt.sub(repl, src)
            logger.debug("REGEX: %s => %s" %(src,dst))
            res = [ dst ]
        if prefix:
            res.insert(0, prefix)
            logger.debug("PREFIX: %s => %s" %(prefix, '-'.join(res)))
        if suffix:
            res.append(suffix)
            logger.debug("SUFFIX: %s => %s" %(suffix, '-'.join(res)))
        if not (regex or prefix or suffix):
            print "no regex or prefix. setting None"
            dst = None
        s['clone_label'] = '-'.join(res)
    return srcchans
    
# ---------------------------------------------------------------------------- #

def generate_clone_info(chanobj, logger, newlabel = None, parent = None):
    """
    simply puts together and then returns a dict representing your new channel

    parameters:
    chanobj(dict)           - dict representing source channel (from channel.getDetails)
    newlabel(str)           - label for new cloned channel
    logger(logging.Logger)  - a logger for reporting (probably rhnSession.logger)
    parent(str)             - label for parent of new cloned channel. Optional.
    """
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    # template
    clonelabel = chanobj.get('clone_label', None)
    # backwards compat - remove this after testing
    if not clonelabel:
        if newlabel:
            clonelabel = newlabel
        else:
            clonelabel = "clone-%s" % chanobj.get('label')

    logger.debug("Generating channel info for clone %s" % clonelabel)

    cloneobj = {
        'summary' : "Clone of %s, created on %s" %(chanobj['label'], timestamp),
        'name'    : label_to_name(chanobj['clone_label']),
        'label'   : clonelabel,
    }

    if parent is not None:
        cloneobj['parent_label'] = parent

    if chanobj['description'] != '':
        logger.debug("Adding description %(description)s" % chanobj)
        cloneobj['description'] = chanobj['description']
    if chanobj['gpg_key_url'] != '':
        logger.debug("Adding GPG Key URL '%(gpg_key_url)s'" % chanobj)
        cloneobj['gpg_url'] = chanobj['gpg_key_url']
    if chanobj['gpg_key_id']:
        logger.debug("Adding GPG Key ID true == %(gpg_key_id)s" % chanobj)
        cloneobj['gpg_id'] = chanobj['gpg_key_id']
    if chanobj['gpg_key_fp']:
        logger.debug("Adding GPG Fingerprint %(gpg_key_fp)s" % chanobj)
        cloneobj['gpg_fingerprint'] = chanobj['gpg_key_fp']

    return cloneobj        

# ---------------------------------------------------------------------------- #

def main():    
    """
    main script functionality
    """
    # Parse command line args and set loglevel
    opts, args = parse_cmdline(sys.argv[1:])

    # configure log verbosity
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30
    
    # initialiase an RHN Session
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug or --verbose switches?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

# --------------------------- Sanity Checking Code --------------------------- #

        # list of valid channel labels for checking source channel existence
        channels = [ x['label'] for x in channel.listSoftwareChannels(RHN) ]
        # this may be an inefficient approach
        source_channels = []
        if opts.source not in channels:
            RHN.logError("source channel %s does not exist" % opts.source)
            print "Error: no such channel label: %s" % opts.source
            sys.exit(2)
        else:
            source_channels = [ channel.getDetails(RHN, opts.source) ]
        if opts.parent:
            parentinfo = channel.getDetails(RHN, opts.parent)
            if parentinfo and len(parentinfo.get('parent_channel_label', '')) != 0:
                RHN.logError("%s is not a valid existing parent channel" % opts.parent)
                sys.exit(2)
            else:
                parentlabel = opts.parent
        # now get a list of child channels if we specified --recursive
        # we can't specify a parent channel and recursive cloning, so
        # this is an exception to the if opts.parent block
        elif opts.recursive:
            childchannels = channel.listChildren(RHN, opts.source)
            RHN.logDebug("Child Channels: %s" % '|'.join([ x['label'] for x in childchannels]))
        # --exclude makes no sense outside of --recursive, so we do it here:
            if opts.exclude:
                RHN.logDebug("Excluding %s" % '|'.join(opts.exclude))
                excluded = [ x for x in childchannels if x['label'] in opts.exclude ]
                for chan in excluded:
                    RHN.logInfo("Channel %(label)s is excluded. Removing it from our channel list" % chan)
                    childchannels.remove(chan)
            source_channels.extend(childchannels)

# -------------------------- Recursive Cloning Code -------------------------- #

        # let's apply the regex and or prefix substitutions on our provided channels
        if not opts.dest:
            # chanmaps now a list of dict.
            chanmaps = generate_clone_labels(source_channels, regex = opts.regex,
                                             prefix = opts.prefix, 
                                             suffix = opts.suffix,
                                             delimiter = opts.delimiter,
                                             logger = RHN.logger)
        elif len(source_channels) != 1:
            print "how come we do not have exactly one source channel?"
            sys.exit(2)

        else:
            source_channels[0]['clone_label'] = opts.dest
            chanmaps = source_channels

# ----------------------------- Reporting output ----------------------------- #

        if opts.test:
            maxsrc = max([ len(x.get('label')) for x in chanmaps ]) + 2
            maxdst = max([ len(x.get('clone_label')) for x in chanmaps ]) + 2
            
            fmtstr = "%%(label)-%ds | %%(clone_label)-%ds" % (maxsrc, maxdst)
            print "TEST OUTPUT - NO CHANGES MADE"
            print "Results of cloning command would  be as follows"
            print fmtstr % { 'label' : "Current Label", 'clone_label' : "Clone Label" }
            print "%s | %s " %('-' * maxsrc, '-' * maxdst)
            # Are we in recursive mode? if so, the first mapping is for parent channels
            if opts.recursive:
                basechan = chanmaps.pop(0)
                print fmtstr % basechan
                fmtstr = "  %%(label)-%ds |   %%(clone_label)-%ds" % (maxsrc -2, maxdst -2)

            for c in chanmaps:
                print fmtstr % c
            
            sys.exit(0)

        # generic parent mapping
        cloneparent = opts.parent

# --------------------------- base channel cloning --------------------------- #
        if opts.recursive:
            # in recursive mode, the base channel (was opts.source) is the first entry
            # in our processed list of channel dicts
            # actually we shouldn't have more than one unless we're in recursive mode.
            basechan = chanmaps.pop(0)
            cloneparent = basechan.get('clone_label')
            RHN.logDebug("Recursive mode. Cloning all child channels of %(label)s" % basechan)
            # clone the base channel. First generate a suitable dict structure:
            baseclone = generate_clone_info(basechan, RHN.logger)

            if channel.cloneChannel(RHN, basechan['label'], opts.noerrata, **baseclone):
                RHN.logInfo("successfully cloned %(label)s as %(clone_label)s" % basechan )
                parentlabel = basechan.get('clone_label')
            else:
                RHN.logErr("Failed to clone base channel %(label)s. Aborting" % basechan)
                print "Error cloning channel"
                sys.exit(2)

        # if we're in recursive mode, hopefully we already cloned our base channel, let's
        # attempt the rest. If not, let's just work our way through the list.
        # print "Channel Maps"
        # pprint(chanmaps)
# -------------------------- child channel cloning --------------------------- #
        for chanobj in chanmaps:
            cloneinfo = generate_clone_info(chanobj, RHN.logger, parent = cloneparent)
            if opts.name:
                cloneinfo['name'] = opts.name
            if channel.cloneChannel(RHN, chanobj['label'], opts.noerrata, **cloneinfo):
                RHN.logInfo("successfully cloned %(label)s as %(clone_label)s" % chanobj)
            else:
                # if one of the child channels fails, we try all the others anyway
                RHN.logErr("Failed to clone channel %(label)s." % chanobj)
                print "Error cloning channel %(label)s"  % chanobj
                continue

    except KeyboardInterrupt:
        RHN.logDebug("operation cancelled")
        sys.exit(1)


# ---------------------------------------------------------------------------- #

if __name__ == '__main__':
    # if called directly (most likely the case), run the main() function
    main()
    
# footer - do not edit below this    
# vim modeline    
# vim: set ts=4 sts=4 sw=4 et cindent ft=python nu:
