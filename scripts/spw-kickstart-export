#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__="""
spw-kickstart-export

A script to extract information about an RHN satellite kickstart profile and export it to JSON.
This includes the following:
* kickstart options
  - package profiles
  - locale
  - SELinux settings
  - 
* activation keys
  - configuration channels 
  - system groups
    - system groups can be created by name if missing.

"""
__author__ = "Stuart Sears <stuart@sjsears.com>"

# ------------------------- standard library imports ------------------------- #
import sys
import os
import time
import re
from fnmatch import fnmatch
from optparse import OptionParser, OptionGroup
from pprint import pprint

# ---------------------------- Custom RHN Modules ---------------------------- #
import rhnapi
from rhnapi import kickstart
from rhnapi import activationkey
# this needs editing to add the ID->name functionality:
from rhnapi import systemgroup
from rhnapi import utils
from rhnapi import channel


# --------------------------- Script Configuration --------------------------- #
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Dump a kickstart profile (or all profiles) to a JSON-format text file"
    usagestr = "%prog [RHNOPTS] [KICKSTART-OPTS]"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
#    parser.add_option("-q", "--quiet", action = "store_true", default = False,
#        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    ksgrp = OptionGroup(parser, "Kickstart-specific options")
    ksgrp.add_option("--list", action="store_true", default=False, help="List kickstart labels and exit")
# should we just default to all ? Otherwise the script does nothing by default
    ksgrp.add_option("-k", "--kickstart", help="kickstart label to export. Can also take a comma-separated list. No spaces. By default ALL kickstart profiles are exported.")
    ksgrp.add_option("-g", "--glob", help = "shell-style glob for selecting kickstart profiles for export or listing")
    ksgrp.add_option("-f", "--file", help="filename to dump kickstart information to [KICKSTARTLABEL.json]")
# renamed to --test for consistency
    ksgrp.add_option("--test", action="store_true", default=False, help="DRY RUN. Pretty print data to stdout")
    parser.add_option_group(ksgrp)

    opts, args = parser.parse_args()

    if opts.glob and opts.kickstart:
        print "ERROR: Conflicting options"
        print "--glob and --kickstart cannot be used together. Please choose one or the other. Or neither."
        parser.print_help()
        sys.exit(1)

    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def get_ks_details(rhn, ksobject, verbose = False):
    """
    Suck all the details out of your satellite for a given kickstart label
    and merge them into a single dict structure.
    For some reason this takes about 43 different methods

    returns:
    dict (a kickstart structure)

    params:
    rhn:                    an authenticated rhnapi.rhnSession
    ksobject                a dict structure containing base kickstart info
    verbose                 whether to make more noise
    """
    rhn.logInfo("Processing Kickstart Profile %(label)s" % ksobject)
    kslabel = ksobject.get('label')
    kscontents = kickstart.downloadRenderedKickstart(rhn, kslabel)
    rhn.logDebug("* child channel subscriptions")
    ksobject['child_channels']        = kickstart.getChildChannels(rhn, kslabel)
    rhn.logDebug("* advanced options")
    ksobject['advanced_opts']         = kickstart.getAdvancedOptions(rhn, kslabel)
    rhn.logDebug("* software package list")
    ksobject['software_list']         = kickstart.getSoftwareList(rhn, kslabel)
    rhn.logDebug("* custom kickstart options")
    ksobject['custom_opts']           = kickstart.getCustomOptions(rhn, kslabel)
    # technically included in the base kickstart info:
    rhn.logDebug("* kickstart tree (distribution) information")
    # wasted api call
    # kstree                            = kickstart.getKickstartTree(rhn, kslabel)
    treeinfo = kickstart.getTreeDetails(rhn, ksobject.get('tree_label'))
    treeinfo['channel_label'] = channel.getDetails(rhn, treeinfo.get('channel_id')).get('label')
    ksobject['ks_tree'] = treeinfo

    # list all the pre and post scripts
    rhn.logDebug("* pre and post scripts")
    ksobject['script_list']           = kickstart.listScripts(rhn, kslabel)
    rhn.logDebug("* assigned IP address ranges")
    ksobject['ip_ranges']             = kickstart.listIpRanges(rhn, kslabel)
    # custom kickstart variables
    rhn.logDebug("* kickstart (cobbler) variables")
    ksobject['variable_list']         = kickstart.getVariables(rhn, kslabel)
    
    # activation keys are complicated and we need more information than the defaults
    # in case they must be recreated on import:
    rhn.logDebug("* activation keys")
    ksobject['activation_keys']       = kickstart.getActivationKeys(rhn, kslabel)
    for akey in ksobject['activation_keys']:
        rhn.logDebug("  - %(key)s")
        rhn.logDebug("    * adding configuration channels")
        akey['config_channels'] = activationkey.listConfigChannels(rhn, akey['key'])
        akey['config_deploy'] = activationkey.checkConfigDeployment(rhn, akey['key'])
        if len(akey['server_group_ids']) != 0:
            rhn.logDebug("    * adding server groups")
            akey['server_groups'] = get_group_details(rhn, akey['server_group_ids'])
    rhn.logDebug("* partitioning scheme")   
    ksobject['partitioning_scheme']   = kickstart.getPartitioningScheme(rhn, kslabel)
    rhn.logDebug("* registration type ")
    ksobject['reg_type']              = kickstart.getRegistrationType(rhn, kslabel)
    # technically this is unnecessary as it is part of the 'advanced options' in kickstart:
    # still, for completeness
    ksobject['selinux_mode']          = kickstart.getSELinux(rhn, kslabel)
    ksobject['file_preservations']    = kickstart.listFilePreservations(rhn, kslabel)
    ksobject['gpg_ssl_keys']          = kickstart.listCryptoKeys(rhn, kslabel)
    ksobject['config_mgmt']           = kickstart.checkConfigManagement(rhn, kslabel)
    ksobject['remote_cmds']           = kickstart.checkRemoteCommands(rhn, kslabel)
    # so, there's a setLogging, but not a getLogging equivalent. huh?
    # ksobject['logging']               = kickstart.getLogging(rhn, kslabel)
    ksobject['log_pre'] = False
    ksobject['log_post'] = False
    if re.search("pre --log", kscontents):
        ksobject['log_pre'] = True

    if re.search("%post.*--log", kscontents):
        ksobject["log_post"] = True
    
    # group ids will not be the same on all servers, so we need their names too:
    # this needs updating to add kickstart snippets too
    # that will be interesting as it needs to parse the following elements for 
# snippet entries:
# custom kickstart options
# pre and post scripts
# all snippets imported in those too.
    
    return ksobject
        
# ---------------------------------------------------------------------------- #

def get_group_details(rhn, groupids, verbose = False):
    """
    Call out to rhnapi.systemgroup to get group details for each group in groupids
    We need group names, ideally as IDs could differ from satellite to satellite.
    To avoid too much code, we simply call the getDetails method.
    """
    results = []
    for grp in groupids:
        rhn.logDebug("processing server group ID %d" % grp)
        grpdetails = systemgroup.getDetails(rhn, grp)
        # grpdetails should never be false - we got the groupid from this server, after all
        # still, for safety...
        if grpdetails != False:
            results.append(grpdetails)
    return results
        
# ---------------------------------------------------------------------------- #

def ks_table(ksobjlist):
    """
    Produce a pretty table from a list of kickstart objects
    """
    maxlen = utils.getMaxLen(ksobjlist)
    # use our dict of field lengths to produce a format string for each line
    fmtstr = "%%(label)-%(label)ds %%(name)-%(name)ds %%(tree_label)s" % maxlen
    # print a header
    print fmtstr % {'label' : 'Label', 'name' : 'Name', 'tree_label': 'Kickstart Tree'}
    print fmtstr % {'label' : '-----', 'name' : '----', 'tree_label': '--------------'}
    # for each kickstart, print out a formatted line:
    for ksobj in ksobjlist:
        print fmtstr % ksobj

# ---------------------------------------------------------------------------- #

def main():    
# parse the command line options and arguments:
    opts, args = parse_cmdline(sys.argv)

# set log levels for our rhn session
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
# initialiase an RHN Session
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel = rhnloglevel)

        if opts.verbose:
            RHN.enableVerbose()

        if opts.debug:
            RHN.enableDebug()
            
# collect some information from the satellite for later use:
# a list of all existing kickstart profiles:
        RHN.logInfo("Enumerating kickstart profiles")
        all_kickstarts = kickstart.listKickstarts(RHN)

# selecting kickstarts for export or listing
# here we generate a list of kickstart objects (dicts)

# first, did we explicitly select profiles? - only use them if they exist :)
        if opts.kickstart:
            export_list = [ x for x in all_kickstarts if x['label'] in opts.kickstart.split(',') ]

# if not, did we specify a wildcard?
        elif opts.glob:
            export_list = [ x for x in all_kickstarts if fnmatch(x['label'], opts.glob) ]

# failing that, we dump all kickstarts on the satellite
        else:
            RHN.logInfo("No label or glob pattern specified, processing all kickstarts. This may be a long process.")
            export_list = all_kickstarts

# for reporting later
        export_labels = [ x['label'] for x in export_list ]

# are we just listing kickstart profiles?
        if opts.list:
            ks_table(export_list)
            sys.exit(0)

        for ksobject in export_list:
            data = (get_ks_details(RHN, ksobject, opts.verbose))
            ksobject.update(data)
             
# is this just a test to show what would be done?
        if opts.test:
            pprint(export_list)
            sys.exit(0)

# did we specify an output file?
        if opts.file:
            outputfile = opts.file
# if not, try naming it after the kickstart profiles we chose            
        elif opts.kickstart:
            if len(export_labels) == 1:
                outputfile = '%s.json' % '_'.join(export_labels)
            else:
# for multiple labels, we just use a generic filename, based on a timestamp
                outputfile = "kickstart-export-%s.json" % time.strftime("%Y-%m-%d_%H%M%S")
# failing that, just use a timestamp            
        else:
            outputfile = "kickstart-export-%s.json" % time.strftime("%Y-%m-%d_%H%M%S")

# did we successfully extract at least one kickstart?
        if len(export_list)  != 0:
            if utils.dumpJSON(export_list, outputfile, verbose=opts.verbose):
                RHN.logInfo("succesfully exported kickstarts to %s" % outputfile)
            else:
                RHN.logError("Failed to export kickstarts to %s. Check permissions?" % outputfile)
        else:
            RHN.logFatal("None of the chosen kickstart labels could be successfully dumped")
        
# handle CTRL-C in the middle of the process
    except KeyboardInterrupt:
        print "operation cancelled\n"
        sys.exit(1)

if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python:
